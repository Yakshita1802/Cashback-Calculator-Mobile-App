{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport invariant from \"../utils/invariant\";\nimport getScreenForRouteName from \"./getScreenForRouteName\";\nimport createConfigGetter from \"./createConfigGetter\";\nimport * as NavigationActions from \"../NavigationActions\";\nimport * as SwitchActions from \"./SwitchActions\";\nimport * as StackActions from \"./StackActions\";\nimport validateRouteConfigMap from \"./validateRouteConfigMap\";\nimport { createPathParser } from \"./pathUtils\";\nvar defaultActionCreators = function defaultActionCreators() {\n  return {};\n};\nexport default (function (routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  validateRouteConfigMap(routeConfigs);\n  var order = config.order || Object.keys(routeConfigs);\n  var getCustomActionCreators = config.getCustomActionCreators || defaultActionCreators;\n  var initialRouteParams = config.initialRouteParams;\n  var initialRouteName = config.initialRouteName || order[0];\n  var backBehavior = config.backBehavior || 'none';\n  var resetOnBlur = config.hasOwnProperty('resetOnBlur') ? config.resetOnBlur : true;\n  var initialRouteIndex = order.indexOf(initialRouteName);\n  if (initialRouteIndex === -1) {\n    throw new Error(\"Invalid initialRouteName '\".concat(initialRouteName, \"'.\") + \"Should be one of \".concat(order.map(function (n) {\n      return \"\\\"\".concat(n, \"\\\"\");\n    }).join(', ')));\n  }\n  var childRouters = {};\n  order.forEach(function (routeName) {\n    childRouters[routeName] = null;\n    var screen = getScreenForRouteName(routeConfigs, routeName);\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n  function getParamsForRoute(routeName, params) {\n    var routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return _objectSpread(_objectSpread({}, routeConfig.params), params);\n    } else {\n      return params;\n    }\n  }\n  var _createPathParser = createPathParser(childRouters, routeConfigs, config),\n    getPathAndParamsForRoute = _createPathParser.getPathAndParamsForRoute,\n    _getActionForPathAndParams = _createPathParser.getActionForPathAndParams;\n  function resetChildRoute(routeName) {\n    var initialParams = routeName === initialRouteName ? initialRouteParams : null;\n    var params = getParamsForRoute(routeName, initialParams);\n    var childRouter = childRouters[routeName];\n    if (childRouter) {\n      var childAction = NavigationActions.init();\n      return _objectSpread(_objectSpread({}, childRouter.getStateForAction(childAction)), {}, {\n        key: routeName,\n        routeName: routeName\n      }, params ? {\n        params: params\n      } : {});\n    }\n    return _objectSpread({\n      key: routeName,\n      routeName: routeName\n    }, params ? {\n      params: params\n    } : {});\n  }\n  function getNextState(action, prevState, possibleNextState) {\n    function updateNextStateHistory(prevState, nextState) {\n      if (backBehavior !== 'history' || prevState && nextState && nextState.index === prevState.index) {\n        return nextState;\n      }\n      var nextRouteKeyHistory = prevState ? prevState.routeKeyHistory : [];\n      if (action.type === NavigationActions.NAVIGATE) {\n        nextRouteKeyHistory = _toConsumableArray(nextRouteKeyHistory);\n        var keyToAdd = nextState.routes[nextState.index].key;\n        nextRouteKeyHistory = nextRouteKeyHistory.filter(function (k) {\n          return k !== keyToAdd;\n        });\n        nextRouteKeyHistory.push(keyToAdd);\n      } else if (action.type === NavigationActions.BACK) {\n        nextRouteKeyHistory = _toConsumableArray(nextRouteKeyHistory);\n        nextRouteKeyHistory.pop();\n      }\n      return _objectSpread(_objectSpread({}, nextState), {}, {\n        routeKeyHistory: nextRouteKeyHistory\n      });\n    }\n    var nextState = possibleNextState;\n    if (prevState && possibleNextState && prevState.index !== possibleNextState.index && resetOnBlur) {\n      var prevRouteName = prevState.routes[prevState.index].routeName;\n      var nextRoutes = _toConsumableArray(possibleNextState.routes);\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n      nextState = _objectSpread(_objectSpread({}, possibleNextState), {}, {\n        routes: nextRoutes\n      });\n    }\n    return updateNextStateHistory(prevState, nextState);\n  }\n  function getInitialState() {\n    var routes = order.map(resetChildRoute);\n    var initialState = {\n      routes: routes,\n      index: initialRouteIndex\n    };\n    if (backBehavior === 'history') {\n      var initialKey = routes[initialRouteIndex].key;\n      initialState['routeKeyHistory'] = [initialKey];\n    }\n    return initialState;\n  }\n  return {\n    childRouters: childRouters,\n    getActionCreators: function getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n    getStateForAction: function getStateForAction(action, inputState) {\n      var prevState = inputState ? _objectSpread({}, inputState) : inputState;\n      var state = inputState || getInitialState();\n      var activeChildIndex = state.index;\n      if (action.type === NavigationActions.INIT) {\n        var params = action.params;\n        if (params) {\n          state.routes = state.routes.map(function (route) {\n            return _objectSpread(_objectSpread({}, route), {}, {\n              params: _objectSpread(_objectSpread(_objectSpread({}, route.params), params), route.routeName === initialRouteName ? initialRouteParams : null)\n            });\n          });\n        }\n      }\n      if (action.type === SwitchActions.JUMP_TO && (action.key == null || action.key === state.key)) {\n        var _params = action.params;\n        var index = state.routes.findIndex(function (route) {\n          return route.routeName === action.routeName;\n        });\n        if (index === -1) {\n          throw new Error(\"There is no route named '\".concat(action.routeName, \"' in the navigator with the key '\").concat(action.key, \"'.\\n\") + \"Must be one of: \".concat(state.routes.map(function (route) {\n            return \"'\".concat(route.routeName, \"'\");\n          }).join(',')));\n        }\n        return getNextState(action, prevState, _objectSpread(_objectSpread({}, state), {}, {\n          routes: _params ? state.routes.map(function (route, i) {\n            return i === index ? _objectSpread(_objectSpread({}, route), {}, {\n              params: _objectSpread(_objectSpread({}, route.params), _params)\n            }) : route;\n          }) : state.routes,\n          index: index\n        }));\n      }\n      var activeChildLastState = state.routes[state.index];\n      var activeChildRouter = childRouters[order[state.index]];\n      if (activeChildRouter) {\n        var activeChildState = activeChildRouter.getStateForAction(action, activeChildLastState);\n        if (!activeChildState && inputState) {\n          return null;\n        }\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          var routes = _toConsumableArray(state.routes);\n          routes[state.index] = activeChildState;\n          return getNextState(action, prevState, _objectSpread(_objectSpread({}, state), {}, {\n            routes: routes\n          }));\n        }\n      }\n      var isBackEligible = action.key == null || action.key === activeChildLastState.key;\n      if (action.type === NavigationActions.BACK) {\n        if (isBackEligible && backBehavior === 'initialRoute') {\n          activeChildIndex = initialRouteIndex;\n        } else if (isBackEligible && backBehavior === 'order') {\n          activeChildIndex = Math.max(0, activeChildIndex - 1);\n        } else if (isBackEligible && backBehavior === 'history' && state.routeKeyHistory.length > 1) {\n          var routeKey = state.routeKeyHistory[state.routeKeyHistory.length - 2];\n          activeChildIndex = order.indexOf(routeKey);\n        }\n      }\n      var didNavigate = false;\n      if (action.type === NavigationActions.NAVIGATE) {\n        didNavigate = !!order.find(function (childId, i) {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n          return false;\n        });\n        if (didNavigate) {\n          var childState = state.routes[activeChildIndex];\n          var childRouter = childRouters[action.routeName];\n          var newChildState = childState;\n          if (action.action && childRouter) {\n            var childStateUpdate = childRouter.getStateForAction(action.action, childState);\n            if (childStateUpdate) {\n              newChildState = childStateUpdate;\n            }\n          }\n          if (action.params) {\n            newChildState = _objectSpread(_objectSpread({}, newChildState), {}, {\n              params: _objectSpread(_objectSpread({}, newChildState.params || {}), action.params)\n            });\n          }\n          if (newChildState !== childState) {\n            var _routes = _toConsumableArray(state.routes);\n            _routes[activeChildIndex] = newChildState;\n            var nextState = _objectSpread(_objectSpread({}, state), {}, {\n              routes: _routes,\n              index: activeChildIndex\n            });\n            return getNextState(action, prevState, nextState);\n          } else if (newChildState === childState && state.index === activeChildIndex && prevState) {\n            return null;\n          }\n        }\n      }\n      if (action.type === NavigationActions.SET_PARAMS) {\n        var key = action.key;\n        var lastRoute = state.routes.find(function (route) {\n          return route.key === key;\n        });\n        if (lastRoute) {\n          var _params2 = _objectSpread(_objectSpread({}, lastRoute.params), action.params);\n          var _routes2 = _toConsumableArray(state.routes);\n          _routes2[state.routes.indexOf(lastRoute)] = _objectSpread(_objectSpread({}, lastRoute), {}, {\n            params: _params2\n          });\n          return getNextState(action, prevState, _objectSpread(_objectSpread({}, state), {}, {\n            routes: _routes2\n          }));\n        }\n      }\n      if (activeChildIndex !== state.index) {\n        return getNextState(action, prevState, _objectSpread(_objectSpread({}, state), {}, {\n          index: activeChildIndex\n        }));\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return _objectSpread({}, state);\n      }\n      var isActionBackOrPop = action.type === NavigationActions.BACK || action.type === StackActions.POP || action.type === StackActions.POP_TO_TOP;\n      var sendActionToInactiveChildren = !isActionBackOrPop || action.type === NavigationActions.BACK && action.key != null;\n      if (sendActionToInactiveChildren) {\n        var _index = state.index;\n        var _routes3 = state.routes;\n        order.find(function (childId, i) {\n          var childRouter = childRouters[childId];\n          if (i === _index) {\n            return false;\n          }\n          var childState = _routes3[i];\n          if (childRouter) {\n            childState = childRouter.getStateForAction(action, childState);\n          }\n          if (!childState) {\n            _index = i;\n            return true;\n          }\n          if (childState !== _routes3[i]) {\n            _routes3 = _toConsumableArray(_routes3);\n            _routes3[i] = childState;\n            _index = i;\n            return true;\n          }\n          return false;\n        });\n        if (action.preserveFocus) {\n          _index = state.index;\n        }\n        if (_index !== state.index || _routes3 !== state.routes) {\n          return getNextState(action, prevState, _objectSpread(_objectSpread({}, state), {}, {\n            index: _index,\n            routes: _routes3\n          }));\n        }\n      }\n      return state;\n    },\n    getComponentForState: function getComponentForState(state) {\n      var routeName = state.routes[state.index].routeName;\n      invariant(routeName, \"There is no route defined for index \".concat(state.index, \". Check that\\n        that you passed in a navigation state with a valid tab/screen index.\"));\n      var childRouter = childRouters[routeName];\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getComponentForRouteName: function getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getPathAndParamsForState: function getPathAndParamsForState(state) {\n      var route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n    getActionForPathAndParams: function getActionForPathAndParams(path, params) {\n      return _getActionForPathAndParams(path, params);\n    },\n    getScreenOptions: createConfigGetter(routeConfigs, config.defaultNavigationOptions)\n  };\n});","map":{"version":3,"names":["invariant","getScreenForRouteName","createConfigGetter","NavigationActions","SwitchActions","StackActions","validateRouteConfigMap","createPathParser","defaultActionCreators","routeConfigs","config","arguments","length","undefined","order","Object","keys","getCustomActionCreators","initialRouteParams","initialRouteName","backBehavior","resetOnBlur","hasOwnProperty","initialRouteIndex","indexOf","Error","concat","map","n","join","childRouters","forEach","routeName","screen","router","getParamsForRoute","params","routeConfig","_objectSpread","_createPathParser","getPathAndParamsForRoute","getActionForPathAndParams","resetChildRoute","initialParams","childRouter","childAction","init","getStateForAction","key","getNextState","action","prevState","possibleNextState","updateNextStateHistory","nextState","index","nextRouteKeyHistory","routeKeyHistory","type","NAVIGATE","_toConsumableArray","keyToAdd","routes","filter","k","push","BACK","pop","prevRouteName","nextRoutes","getInitialState","initialState","initialKey","getActionCreators","route","stateKey","inputState","state","activeChildIndex","INIT","JUMP_TO","findIndex","i","activeChildLastState","activeChildRouter","activeChildState","isBackEligible","Math","max","routeKey","didNavigate","find","childId","childState","newChildState","childStateUpdate","SET_PARAMS","lastRoute","isActionBackOrPop","POP","POP_TO_TOP","sendActionToInactiveChildren","preserveFocus","getComponentForState","getComponentForRouteName","getPathAndParamsForState","path","getScreenOptions","defaultNavigationOptions"],"sources":["C:\\Users\\filiz\\OneDrive\\Desktop\\versionthree\\Cashback-Calculator-Mobile-App\\node_modules\\react-navigation\\node_modules\\@react-navigation\\core\\lib\\module\\routers\\SwitchRouter.js"],"sourcesContent":["import invariant from '../utils/invariant';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport createConfigGetter from './createConfigGetter';\n\nimport * as NavigationActions from '../NavigationActions';\nimport * as SwitchActions from './SwitchActions';\nimport * as StackActions from './StackActions';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport { createPathParser } from './pathUtils';\n\nconst defaultActionCreators = () => ({});\n\nexport default (routeConfigs, config = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const order = config.order || Object.keys(routeConfigs);\n\n  const getCustomActionCreators =\n    config.getCustomActionCreators || defaultActionCreators;\n\n  const { initialRouteParams } = config;\n  const initialRouteName = config.initialRouteName || order[0];\n  const backBehavior = config.backBehavior || 'none';\n  const resetOnBlur = config.hasOwnProperty('resetOnBlur')\n    ? config.resetOnBlur\n    : true;\n\n  const initialRouteIndex = order.indexOf(initialRouteName);\n  if (initialRouteIndex === -1) {\n    throw new Error(\n      `Invalid initialRouteName '${initialRouteName}'.` +\n        `Should be one of ${order.map((n) => `\"${n}\"`).join(', ')}`\n    );\n  }\n\n  const childRouters = {};\n  order.forEach((routeName) => {\n    childRouters[routeName] = null;\n    const screen = getScreenForRouteName(routeConfigs, routeName);\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n\n  function getParamsForRoute(routeName, params) {\n    let routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return { ...routeConfig.params, ...params };\n    } else {\n      return params;\n    }\n  }\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, config);\n\n  function resetChildRoute(routeName) {\n    let initialParams =\n      routeName === initialRouteName ? initialRouteParams : null;\n    // note(brentvatne): merging initialRouteParams *on top* of default params\n    // on the route seems incorrect but it's consistent with existing behavior\n    // in stackrouter\n    let params = getParamsForRoute(routeName, initialParams);\n    const childRouter = childRouters[routeName];\n    if (childRouter) {\n      const childAction = NavigationActions.init();\n      return {\n        ...childRouter.getStateForAction(childAction),\n        key: routeName,\n        routeName,\n        ...(params ? { params } : {}),\n      };\n    }\n    return {\n      key: routeName,\n      routeName,\n      ...(params ? { params } : {}),\n    };\n  }\n\n  function getNextState(action, prevState, possibleNextState) {\n    function updateNextStateHistory(prevState, nextState) {\n      if (\n        backBehavior !== 'history' ||\n        (prevState && nextState && nextState.index === prevState.index)\n      ) {\n        return nextState;\n      }\n      let nextRouteKeyHistory = prevState ? prevState.routeKeyHistory : [];\n      if (action.type === NavigationActions.NAVIGATE) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n        const keyToAdd = nextState.routes[nextState.index].key;\n        nextRouteKeyHistory = nextRouteKeyHistory.filter((k) => k !== keyToAdd); // dedup\n        nextRouteKeyHistory.push(keyToAdd);\n      } else if (action.type === NavigationActions.BACK) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n        nextRouteKeyHistory.pop();\n      }\n      return {\n        ...nextState,\n        routeKeyHistory: nextRouteKeyHistory,\n      };\n    }\n\n    let nextState = possibleNextState;\n    if (\n      prevState &&\n      possibleNextState &&\n      prevState.index !== possibleNextState.index &&\n      resetOnBlur\n    ) {\n      const prevRouteName = prevState.routes[prevState.index].routeName;\n      const nextRoutes = [...possibleNextState.routes];\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n      nextState = {\n        ...possibleNextState,\n        routes: nextRoutes,\n      };\n    }\n    return updateNextStateHistory(prevState, nextState);\n  }\n\n  function getInitialState() {\n    const routes = order.map(resetChildRoute);\n    const initialState = {\n      routes,\n      index: initialRouteIndex,\n    };\n\n    if (backBehavior === 'history') {\n      const initialKey = routes[initialRouteIndex].key;\n      initialState['routeKeyHistory'] = [initialKey];\n    }\n    return initialState;\n  }\n\n  return {\n    childRouters,\n\n    getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n\n    getStateForAction(action, inputState) {\n      let prevState = inputState ? { ...inputState } : inputState;\n      let state = inputState || getInitialState();\n      let activeChildIndex = state.index;\n\n      if (action.type === NavigationActions.INIT) {\n        // NOTE(brentvatne): this seems weird... why are we merging these\n        // params into child routes?\n        // ---------------------------------------------------------------\n        // Merge any params from the action into all the child routes\n        const { params } = action;\n        if (params) {\n          state.routes = state.routes.map((route) => ({\n            ...route,\n            params: {\n              ...route.params,\n              ...params,\n              ...(route.routeName === initialRouteName\n                ? initialRouteParams\n                : null),\n            },\n          }));\n        }\n      }\n\n      if (\n        action.type === SwitchActions.JUMP_TO &&\n        (action.key == null || action.key === state.key)\n      ) {\n        const { params } = action;\n        const index = state.routes.findIndex(\n          (route) => route.routeName === action.routeName\n        );\n\n        if (index === -1) {\n          throw new Error(\n            `There is no route named '${action.routeName}' in the navigator with the key '${action.key}'.\\n` +\n              `Must be one of: ${state.routes\n                .map((route) => `'${route.routeName}'`)\n                .join(',')}`\n          );\n        }\n\n        return getNextState(action, prevState, {\n          ...state,\n          routes: params\n            ? state.routes.map((route, i) =>\n                i === index\n                  ? {\n                      ...route,\n                      params: {\n                        ...route.params,\n                        ...params,\n                      },\n                    }\n                  : route\n              )\n            : state.routes,\n          index,\n        });\n      }\n\n      // Let the current child handle it\n      const activeChildLastState = state.routes[state.index];\n      const activeChildRouter = childRouters[order[state.index]];\n      if (activeChildRouter) {\n        const activeChildState = activeChildRouter.getStateForAction(\n          action,\n          activeChildLastState\n        );\n        if (!activeChildState && inputState) {\n          return null;\n        }\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          const routes = [...state.routes];\n          routes[state.index] = activeChildState;\n          return getNextState(action, prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      // Handle tab changing. Do this after letting the current tab try to\n      // handle the action, to allow inner children to change first\n      const isBackEligible =\n        action.key == null || action.key === activeChildLastState.key;\n      if (action.type === NavigationActions.BACK) {\n        if (isBackEligible && backBehavior === 'initialRoute') {\n          activeChildIndex = initialRouteIndex;\n        } else if (isBackEligible && backBehavior === 'order') {\n          activeChildIndex = Math.max(0, activeChildIndex - 1);\n        }\n        // The history contains current route, so we can only go back\n        // if there is more than one item in the history\n        else if (\n          isBackEligible &&\n          backBehavior === 'history' &&\n          state.routeKeyHistory.length > 1\n        ) {\n          const routeKey =\n            state.routeKeyHistory[state.routeKeyHistory.length - 2];\n          activeChildIndex = order.indexOf(routeKey);\n        }\n      }\n\n      let didNavigate = false;\n      if (action.type === NavigationActions.NAVIGATE) {\n        didNavigate = !!order.find((childId, i) => {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n          return false;\n        });\n        if (didNavigate) {\n          const childState = state.routes[activeChildIndex];\n          const childRouter = childRouters[action.routeName];\n          let newChildState = childState;\n\n          if (action.action && childRouter) {\n            const childStateUpdate = childRouter.getStateForAction(\n              action.action,\n              childState\n            );\n            if (childStateUpdate) {\n              newChildState = childStateUpdate;\n            }\n          }\n\n          if (action.params) {\n            newChildState = {\n              ...newChildState,\n              params: {\n                ...(newChildState.params || {}),\n                ...action.params,\n              },\n            };\n          }\n\n          if (newChildState !== childState) {\n            const routes = [...state.routes];\n            routes[activeChildIndex] = newChildState;\n            const nextState = {\n              ...state,\n              routes,\n              index: activeChildIndex,\n            };\n            return getNextState(action, prevState, nextState);\n          } else if (\n            newChildState === childState &&\n            state.index === activeChildIndex &&\n            prevState\n          ) {\n            return null;\n          }\n        }\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find((route) => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return getNextState(action, prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return getNextState(action, prevState, {\n          ...state,\n          index: activeChildIndex,\n        });\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return { ...state };\n      }\n\n      const isActionBackOrPop =\n        action.type === NavigationActions.BACK ||\n        action.type === StackActions.POP ||\n        action.type === StackActions.POP_TO_TOP;\n      const sendActionToInactiveChildren =\n        !isActionBackOrPop ||\n        (action.type === NavigationActions.BACK && action.key != null);\n\n      // Let other children handle it and switch to the first child that returns a new state\n      // Do not do this for StackActions.POP or NavigationActions.BACK actions without a key:\n      // it would be unintuitive for these actions to switch to another tab just because that tab had a Stack that could accept a back action\n      if (sendActionToInactiveChildren) {\n        let index = state.index;\n        let routes = state.routes;\n        order.find((childId, i) => {\n          const childRouter = childRouters[childId];\n          if (i === index) {\n            return false;\n          }\n          let childState = routes[i];\n          if (childRouter) {\n            childState = childRouter.getStateForAction(action, childState);\n          }\n          if (!childState) {\n            index = i;\n            return true;\n          }\n          if (childState !== routes[i]) {\n            routes = [...routes];\n            routes[i] = childState;\n            index = i;\n            return true;\n          }\n          return false;\n        });\n\n        // Nested routers can be updated after switching children with actions such as SET_PARAMS\n        // and COMPLETE_TRANSITION.\n        if (action.preserveFocus) {\n          index = state.index;\n        }\n\n        if (index !== state.index || routes !== state.routes) {\n          return getNextState(action, prevState, {\n            ...state,\n            index,\n            routes,\n          });\n        }\n      }\n\n      return state;\n    },\n\n    getComponentForState(state) {\n      const routeName = state.routes[state.index].routeName;\n      invariant(\n        routeName,\n        `There is no route defined for index ${state.index}. Check that\n        that you passed in a navigation state with a valid tab/screen index.`\n      );\n      const childRouter = childRouters[routeName];\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      config.defaultNavigationOptions\n    ),\n  };\n};\n"],"mappings":";;;;AAAA,OAAOA,SAAP;AACA,OAAOC,qBAAP;AACA,OAAOC,kBAAP;AAEA,OAAO,KAAKC,iBAAZ;AACA,OAAO,KAAKC,aAAZ;AACA,OAAO,KAAKC,YAAZ;AACA,OAAOC,sBAAP;AACA,SAASC,gBAAT;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAA;EAAA,OAAU,EAAP;AAAA,CAA9B;AAEA,gBAAe,UAACC,YAAD,EAA+B;EAAA,IAAhBC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAxB;EAEbL,sBAAsB,CAACG,YAAD,CAAtB;EAEA,IAAMK,KAAK,GAAGJ,MAAM,CAACI,KAAP,IAAgBC,MAAM,CAACC,IAAP,CAAYP,YAAZ,CAA9B;EAEA,IAAMQ,uBAAuB,GAC3BP,MAAM,CAACO,uBAAP,IAAkCT,qBADpC;EAGA,IAAQU,kBAAA,GAAuBR,MAA/B,CAAQQ,kBAAA;EACR,IAAMC,gBAAgB,GAAGT,MAAM,CAACS,gBAAP,IAA2BL,KAAK,CAAC,CAAD,CAAzD;EACA,IAAMM,YAAY,GAAGV,MAAM,CAACU,YAAP,IAAuB,MAA5C;EACA,IAAMC,WAAW,GAAGX,MAAM,CAACY,cAAP,CAAsB,aAAtB,IAChBZ,MAAM,CAACW,WADS,GAEhB,IAFJ;EAIA,IAAME,iBAAiB,GAAGT,KAAK,CAACU,OAAN,CAAcL,gBAAd,CAA1B;EACA,IAAII,iBAAiB,KAAK,CAAC,CAA3B,EAA8B;IAC5B,MAAM,IAAIE,KAAJ,CACJ,6BAAAC,MAAA,CAA6BP,gBAA7B,8BAAAO,MAAA,CACsBZ,KAAK,CAACa,GAAN,CAAW,UAAAC,CAAD;MAAA,YAAAF,MAAA,CAAWE,CAAX,OAAV;IAAA,GAA2BC,IAA3B,CAAgC,IAAhC,CADtB,CADI,CAAN;EAID;EAED,IAAMC,YAAY,GAAG,EAArB;EACAhB,KAAK,CAACiB,OAAN,CAAe,UAAAC,SAAD,EAAe;IAC3BF,YAAY,CAACE,SAAD,CAAZ,GAA0B,IAA1B;IACA,IAAMC,MAAM,GAAGhC,qBAAqB,CAACQ,YAAD,EAAeuB,SAAf,CAApC;IACA,IAAIC,MAAM,CAACC,MAAX,EAAmB;MACjBJ,YAAY,CAACE,SAAD,CAAZ,GAA0BC,MAAM,CAACC,MAAjC;IACD;EACF,CAND;EAQA,SAASC,iBAATA,CAA2BH,SAA3B,EAAsCI,MAAtC,EAA8C;IAC5C,IAAIC,WAAW,GAAG5B,YAAY,CAACuB,SAAD,CAA9B;IACA,IAAIK,WAAW,IAAIA,WAAW,CAACD,MAA/B,EAAuC;MACrC,OAAAE,aAAA,CAAAA,aAAA,KAAYD,WAAW,CAACD,MAAjB,GAA4BA,MAAA;IACpC,CAFD,MAEO;MACL,OAAOA,MAAP;IACD;EACF;EAED,IAAAG,iBAAA,GAGIhC,gBAAgB,CAACuB,YAAD,EAAerB,YAAf,EAA6BC,MAA7B,CAHpB;IACE8B,wBADI,GAAAD,iBAAA,CACJC,wBADI;IAEJC,0BAAA,GAAAF,iBAAA,CAAAE,yBAAA;EAGF,SAASC,eAATA,CAAyBV,SAAzB,EAAoC;IAClC,IAAIW,aAAa,GACfX,SAAS,KAAKb,gBAAd,GAAiCD,kBAAjC,GAAsD,IADxD;IAKA,IAAIkB,MAAM,GAAGD,iBAAiB,CAACH,SAAD,EAAYW,aAAZ,CAA9B;IACA,IAAMC,WAAW,GAAGd,YAAY,CAACE,SAAD,CAAhC;IACA,IAAIY,WAAJ,EAAiB;MACf,IAAMC,WAAW,GAAG1C,iBAAiB,CAAC2C,IAAlB,EAApB;MACA,OAAAR,aAAA,CAAAA,aAAA,KACKM,WAAW,CAACG,iBAAZ,CAA8BF,WAA9B,CADE;QAELG,GAAG,EAAEhB,SAFA;QAGLA,SAHK,EAGLA;MAHK,GAIDI,MAAM,GAAG;QAAEA,MAAA,EAAAA;MAAF,CAAH,GAAgB,EAA1B;IAEH;IACD,OAAAE,aAAA;MACEU,GAAG,EAAEhB,SADA;MAELA,SAFK,EAELA;IAFK,GAGDI,MAAM,GAAG;MAAEA,MAAA,EAAAA;IAAF,CAAH,GAAgB,EAA1B;EAEH;EAED,SAASa,YAATA,CAAsBC,MAAtB,EAA8BC,SAA9B,EAAyCC,iBAAzC,EAA4D;IAC1D,SAASC,sBAATA,CAAgCF,SAAhC,EAA2CG,SAA3C,EAAsD;MACpD,IACElC,YAAY,KAAK,SAAjB,IACC+B,SAAS,IAAIG,SAAb,IAA0BA,SAAS,CAACC,KAAV,KAAoBJ,SAAS,CAACI,KAF3D,EAGE;QACA,OAAOD,SAAP;MACD;MACD,IAAIE,mBAAmB,GAAGL,SAAS,GAAGA,SAAS,CAACM,eAAb,GAA+B,EAAlE;MACA,IAAIP,MAAM,CAACQ,IAAP,KAAgBvD,iBAAiB,CAACwD,QAAtC,EAAgD;QAC9CH,mBAAmB,GAAAI,kBAAA,CAAOJ,mBAAJ,CAAtB;QACA,IAAMK,QAAQ,GAAGP,SAAS,CAACQ,MAAV,CAAiBR,SAAS,CAACC,KAA3B,EAAkCP,GAAnD;QACAQ,mBAAmB,GAAGA,mBAAmB,CAACO,MAApB,CAA4B,UAAAC,CAAD;UAAA,OAAOA,CAAC,KAAKH,QAAxC;QAAA,EAAtB;QACAL,mBAAmB,CAACS,IAApB,CAAyBJ,QAAzB;MACD,CALD,MAKO,IAAIX,MAAM,CAACQ,IAAP,KAAgBvD,iBAAiB,CAAC+D,IAAtC,EAA4C;QACjDV,mBAAmB,GAAAI,kBAAA,CAAOJ,mBAAJ,CAAtB;QACAA,mBAAmB,CAACW,GAApB;MACD;MACD,OAAA7B,aAAA,CAAAA,aAAA,KACKgB,SADE;QAELG,eAAe,EAAED;MAAA;IAEpB;IAED,IAAIF,SAAS,GAAGF,iBAAhB;IACA,IACED,SAAS,IACTC,iBADA,IAEAD,SAAS,CAACI,KAAV,KAAoBH,iBAAiB,CAACG,KAFtC,IAGAlC,WAJF,EAKE;MACA,IAAM+C,aAAa,GAAGjB,SAAS,CAACW,MAAV,CAAiBX,SAAS,CAACI,KAA3B,EAAkCvB,SAAxD;MACA,IAAMqC,UAAU,GAAAT,kBAAA,CAAOR,iBAAiB,CAACU,MAAtB,CAAnB;MACAO,UAAU,CAAClB,SAAS,CAACI,KAAX,CAAV,GAA8Bb,eAAe,CAAC0B,aAAD,CAA7C;MACAd,SAAS,GAAAhB,aAAA,CAAAA,aAAA,KACJc,iBADO;QAEVU,MAAM,EAAEO;MAAA,EAFV;IAID;IACD,OAAOhB,sBAAsB,CAACF,SAAD,EAAYG,SAAZ,CAA7B;EACD;EAED,SAASgB,eAATA,CAAA,EAA2B;IACzB,IAAMR,MAAM,GAAGhD,KAAK,CAACa,GAAN,CAAUe,eAAV,CAAf;IACA,IAAM6B,YAAY,GAAG;MACnBT,MADmB,EACnBA,MADmB;MAEnBP,KAAK,EAAEhC;IAFY,CAArB;IAKA,IAAIH,YAAY,KAAK,SAArB,EAAgC;MAC9B,IAAMoD,UAAU,GAAGV,MAAM,CAACvC,iBAAD,CAAN,CAA0ByB,GAA7C;MACAuB,YAAY,CAAC,iBAAD,CAAZ,GAAkC,CAACC,UAAD,CAAlC;IACD;IACD,OAAOD,YAAP;EACD;EAED,OAAO;IACLzC,YADK,EACLA,YADK;IAGL2C,iBAAiB,WAAAA,kBAACC,KAAD,EAAQC,QAAR,EAAkB;MACjC,OAAO1D,uBAAuB,CAACyD,KAAD,EAAQC,QAAR,CAA9B;IACD,CALI;IAOL5B,iBAAiB,WAAAA,kBAACG,MAAD,EAAS0B,UAAT,EAAqB;MACpC,IAAIzB,SAAS,GAAGyB,UAAU,GAAAtC,aAAA,KAAQsC,UAAA,IAAeA,UAAjD;MACA,IAAIC,KAAK,GAAGD,UAAU,IAAIN,eAAe,EAAzC;MACA,IAAIQ,gBAAgB,GAAGD,KAAK,CAACtB,KAA7B;MAEA,IAAIL,MAAM,CAACQ,IAAP,KAAgBvD,iBAAiB,CAAC4E,IAAtC,EAA4C;QAK1C,IAAQ3C,MAAA,GAAWc,MAAnB,CAAQd,MAAA;QACR,IAAIA,MAAJ,EAAY;UACVyC,KAAK,CAACf,MAAN,GAAee,KAAK,CAACf,MAAN,CAAanC,GAAb,CAAkB,UAAA+C,KAAD;YAAA,OAAApC,aAAA,CAAAA,aAAA,KAC3BoC,KADuC;cAE1CtC,MAAM,EAAAE,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACDoC,KAAK,CAACtC,MADH,GAEHA,MAFG,GAGFsC,KAAK,CAAC1C,SAAN,KAAoBb,gBAApB,GACAD,kBADA,GAEA,IAFJ;YAHM;UAAA,CAFK,CAAf;QAUD;MACF;MAED,IACEgC,MAAM,CAACQ,IAAP,KAAgBtD,aAAa,CAAC4E,OAA9B,KACC9B,MAAM,CAACF,GAAP,IAAc,IAAd,IAAsBE,MAAM,CAACF,GAAP,KAAe6B,KAAK,CAAC7B,GAD5C,CADF,EAGE;QACA,IAAQZ,OAAA,GAAWc,MAAnB,CAAQd,MAAA;QACR,IAAMmB,KAAK,GAAGsB,KAAK,CAACf,MAAN,CAAamB,SAAb,CACX,UAAAP,KAAD;UAAA,OAAWA,KAAK,CAAC1C,SAAN,KAAoBkB,MAAM,CAAClB,SAD1B;QAAA,EAAd;QAIA,IAAIuB,KAAK,KAAK,CAAC,CAAf,EAAkB;UAChB,MAAM,IAAI9B,KAAJ,CACJ,4BAAAC,MAAA,CAA4BwB,MAAM,CAAClB,SAAnC,uCAAAN,MAAA,CAAgFwB,MAAM,CAACF,GAAvF,+BAAAtB,MAAA,CACqBmD,KAAK,CAACf,MAAN,CAChBnC,GADgB,CACX,UAAA+C,KAAD;YAAA,WAAAhD,MAAA,CAAegD,KAAK,CAAC1C,SAArB,MADY;UAAA,GAEhBH,IAFgB,CAEX,GAFW,CADrB,CADI,CAAN;QAMD;QAED,OAAOoB,YAAY,CAACC,MAAD,EAASC,SAAT,EAAAb,aAAA,CAAAA,aAAA,KACduC,KADkC;UAErCf,MAAM,EAAE1B,OAAM,GACVyC,KAAK,CAACf,MAAN,CAAanC,GAAb,CAAiB,UAAC+C,KAAD,EAAQQ,CAAR;YAAA,OACfA,CAAC,KAAK3B,KAAN,GAAAjB,aAAA,CAAAA,aAAA,KAESoC,KADL;cAEEtC,MAAM,EAAAE,aAAA,CAAAA,aAAA,KACDoC,KAAK,CAACtC,MADH,GAEHA,OAAA;YAFG,KAKVsC,KATN;UAAA,EADU,GAYVG,KAAK,CAACf,MAd2B;UAerCP,KAAA,EAAAA;QAAA,EAfiB,CAAnB;MAiBD;MAGD,IAAM4B,oBAAoB,GAAGN,KAAK,CAACf,MAAN,CAAae,KAAK,CAACtB,KAAnB,CAA7B;MACA,IAAM6B,iBAAiB,GAAGtD,YAAY,CAAChB,KAAK,CAAC+D,KAAK,CAACtB,KAAP,CAAN,CAAtC;MACA,IAAI6B,iBAAJ,EAAuB;QACrB,IAAMC,gBAAgB,GAAGD,iBAAiB,CAACrC,iBAAlB,CACvBG,MADuB,EAEvBiC,oBAFuB,CAAzB;QAIA,IAAI,CAACE,gBAAD,IAAqBT,UAAzB,EAAqC;UACnC,OAAO,IAAP;QACD;QACD,IAAIS,gBAAgB,IAAIA,gBAAgB,KAAKF,oBAA7C,EAAmE;UACjE,IAAMrB,MAAM,GAAAF,kBAAA,CAAOiB,KAAK,CAACf,MAAV,CAAf;UACAA,MAAM,CAACe,KAAK,CAACtB,KAAP,CAAN,GAAsB8B,gBAAtB;UACA,OAAOpC,YAAY,CAACC,MAAD,EAASC,SAAT,EAAAb,aAAA,CAAAA,aAAA,KACduC,KADkC;YAErCf,MAAA,EAAAA;UAAA,EAFiB,CAAnB;QAID;MACF;MAID,IAAMwB,cAAc,GAClBpC,MAAM,CAACF,GAAP,IAAc,IAAd,IAAsBE,MAAM,CAACF,GAAP,KAAemC,oBAAoB,CAACnC,GAD5D;MAEA,IAAIE,MAAM,CAACQ,IAAP,KAAgBvD,iBAAiB,CAAC+D,IAAtC,EAA4C;QAC1C,IAAIoB,cAAc,IAAIlE,YAAY,KAAK,cAAvC,EAAuD;UACrD0D,gBAAgB,GAAGvD,iBAAnB;QACD,CAFD,MAEO,IAAI+D,cAAc,IAAIlE,YAAY,KAAK,OAAvC,EAAgD;UACrD0D,gBAAgB,GAAGS,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYV,gBAAgB,GAAG,CAA/B,CAAnB;QACD,CAFM,MAKF,IACHQ,cAAc,IACdlE,YAAY,KAAK,SADjB,IAEAyD,KAAK,CAACpB,eAAN,CAAsB7C,MAAtB,GAA+B,CAH5B,EAIH;UACA,IAAM6E,QAAQ,GACZZ,KAAK,CAACpB,eAAN,CAAsBoB,KAAK,CAACpB,eAAN,CAAsB7C,MAAtB,GAA+B,CAArD,CADF;UAEAkE,gBAAgB,GAAGhE,KAAK,CAACU,OAAN,CAAciE,QAAd,CAAnB;QACD;MACF;MAED,IAAIC,WAAW,GAAG,KAAlB;MACA,IAAIxC,MAAM,CAACQ,IAAP,KAAgBvD,iBAAiB,CAACwD,QAAtC,EAAgD;QAC9C+B,WAAW,GAAG,CAAC,CAAC5E,KAAK,CAAC6E,IAAN,CAAW,UAACC,OAAD,EAAUV,CAAV,EAAgB;UACzC,IAAIU,OAAO,KAAK1C,MAAM,CAAClB,SAAvB,EAAkC;YAChC8C,gBAAgB,GAAGI,CAAnB;YACA,OAAO,IAAP;UACD;UACD,OAAO,KAAP;QACD,CANe,CAAhB;QAOA,IAAIQ,WAAJ,EAAiB;UACf,IAAMG,UAAU,GAAGhB,KAAK,CAACf,MAAN,CAAagB,gBAAb,CAAnB;UACA,IAAMlC,WAAW,GAAGd,YAAY,CAACoB,MAAM,CAAClB,SAAR,CAAhC;UACA,IAAI8D,aAAa,GAAGD,UAApB;UAEA,IAAI3C,MAAM,CAACA,MAAP,IAAiBN,WAArB,EAAkC;YAChC,IAAMmD,gBAAgB,GAAGnD,WAAW,CAACG,iBAAZ,CACvBG,MAAM,CAACA,MADgB,EAEvB2C,UAFuB,CAAzB;YAIA,IAAIE,gBAAJ,EAAsB;cACpBD,aAAa,GAAGC,gBAAhB;YACD;UACF;UAED,IAAI7C,MAAM,CAACd,MAAX,EAAmB;YACjB0D,aAAa,GAAAxD,aAAA,CAAAA,aAAA,KACRwD,aADW;cAEd1D,MAAM,EAAAE,aAAA,CAAAA,aAAA,KACAwD,aAAa,CAAC1D,MAAd,IAAwB,EAA5B,GACGc,MAAM,CAACd,MAAA;YAFJ,EAFV;UAOD;UAED,IAAI0D,aAAa,KAAKD,UAAtB,EAAkC;YAChC,IAAM/B,OAAM,GAAAF,kBAAA,CAAOiB,KAAK,CAACf,MAAV,CAAf;YACAA,OAAM,CAACgB,gBAAD,CAAN,GAA2BgB,aAA3B;YACA,IAAMxC,SAAS,GAAAhB,aAAA,CAAAA,aAAA,KACVuC,KADa;cAEhBf,MAFgB,EAEhBA,OAFgB;cAGhBP,KAAK,EAAEuB;YAAA,EAHT;YAKA,OAAO7B,YAAY,CAACC,MAAD,EAASC,SAAT,EAAoBG,SAApB,CAAnB;UACD,CATD,MASO,IACLwC,aAAa,KAAKD,UAAlB,IACAhB,KAAK,CAACtB,KAAN,KAAgBuB,gBADhB,IAEA3B,SAHK,EAIL;YACA,OAAO,IAAP;UACD;QACF;MACF;MAED,IAAID,MAAM,CAACQ,IAAP,KAAgBvD,iBAAiB,CAAC6F,UAAtC,EAAkD;QAChD,IAAMhD,GAAG,GAAGE,MAAM,CAACF,GAAnB;QACA,IAAMiD,SAAS,GAAGpB,KAAK,CAACf,MAAN,CAAa6B,IAAb,CAAmB,UAAAjB,KAAD;UAAA,OAAWA,KAAK,CAAC1B,GAAN,KAAcA,GAA3C;QAAA,EAAlB;QACA,IAAIiD,SAAJ,EAAe;UACb,IAAM7D,QAAM,GAAAE,aAAA,CAAAA,aAAA,KACP2D,SAAS,CAAC7D,MADA,GAEVc,MAAM,CAACd,MAAA,CAFZ;UAIA,IAAM0B,QAAM,GAAAF,kBAAA,CAAOiB,KAAK,CAACf,MAAV,CAAf;UACAA,QAAM,CAACe,KAAK,CAACf,MAAN,CAAatC,OAAb,CAAqByE,SAArB,CAAD,CAAN,GAAA3D,aAAA,CAAAA,aAAA,KACK2D,SADqC;YAExC7D,MAAA,EAAAA;UAAA,EAFF;UAIA,OAAOa,YAAY,CAACC,MAAD,EAASC,SAAT,EAAAb,aAAA,CAAAA,aAAA,KACduC,KADkC;YAErCf,MAAA,EAAAA;UAAA,EAFiB,CAAnB;QAID;MACF;MAED,IAAIgB,gBAAgB,KAAKD,KAAK,CAACtB,KAA/B,EAAsC;QACpC,OAAON,YAAY,CAACC,MAAD,EAASC,SAAT,EAAAb,aAAA,CAAAA,aAAA,KACduC,KADkC;UAErCtB,KAAK,EAAEuB;QAAA,EAFU,CAAnB;MAID,CALD,MAKO,IAAIY,WAAW,IAAI,CAACd,UAApB,EAAgC;QACrC,OAAOC,KAAP;MACD,CAFM,MAEA,IAAIa,WAAJ,EAAiB;QACtB,OAAApD,aAAA,KAAYuC,KAAA;MACb;MAED,IAAMqB,iBAAiB,GACrBhD,MAAM,CAACQ,IAAP,KAAgBvD,iBAAiB,CAAC+D,IAAlC,IACAhB,MAAM,CAACQ,IAAP,KAAgBrD,YAAY,CAAC8F,GAD7B,IAEAjD,MAAM,CAACQ,IAAP,KAAgBrD,YAAY,CAAC+F,UAH/B;MAIA,IAAMC,4BAA4B,GAChC,CAACH,iBAAD,IACChD,MAAM,CAACQ,IAAP,KAAgBvD,iBAAiB,CAAC+D,IAAlC,IAA0ChB,MAAM,CAACF,GAAP,IAAc,IAF3D;MAOA,IAAIqD,4BAAJ,EAAkC;QAChC,IAAI9C,MAAK,GAAGsB,KAAK,CAACtB,KAAlB;QACA,IAAIO,QAAM,GAAGe,KAAK,CAACf,MAAnB;QACAhD,KAAK,CAAC6E,IAAN,CAAW,UAACC,OAAD,EAAUV,CAAV,EAAgB;UACzB,IAAMtC,WAAW,GAAGd,YAAY,CAAC8D,OAAD,CAAhC;UACA,IAAIV,CAAC,KAAK3B,MAAV,EAAiB;YACf,OAAO,KAAP;UACD;UACD,IAAIsC,UAAU,GAAG/B,QAAM,CAACoB,CAAD,CAAvB;UACA,IAAItC,WAAJ,EAAiB;YACfiD,UAAU,GAAGjD,WAAW,CAACG,iBAAZ,CAA8BG,MAA9B,EAAsC2C,UAAtC,CAAb;UACD;UACD,IAAI,CAACA,UAAL,EAAiB;YACftC,MAAK,GAAG2B,CAAR;YACA,OAAO,IAAP;UACD;UACD,IAAIW,UAAU,KAAK/B,QAAM,CAACoB,CAAD,CAAzB,EAA8B;YAC5BpB,QAAM,GAAAF,kBAAA,CAAOE,QAAJ,CAAT;YACAA,QAAM,CAACoB,CAAD,CAAN,GAAYW,UAAZ;YACAtC,MAAK,GAAG2B,CAAR;YACA,OAAO,IAAP;UACD;UACD,OAAO,KAAP;QACD,CApBD;QAwBA,IAAIhC,MAAM,CAACoD,aAAX,EAA0B;UACxB/C,MAAK,GAAGsB,KAAK,CAACtB,KAAd;QACD;QAED,IAAIA,MAAK,KAAKsB,KAAK,CAACtB,KAAhB,IAAyBO,QAAM,KAAKe,KAAK,CAACf,MAA9C,EAAsD;UACpD,OAAOb,YAAY,CAACC,MAAD,EAASC,SAAT,EAAAb,aAAA,CAAAA,aAAA,KACduC,KADkC;YAErCtB,KAFqC,EAErCA,MAFqC;YAGrCO,MAAA,EAAAA;UAAA,EAHiB,CAAnB;QAKD;MACF;MAED,OAAOe,KAAP;IACD,CAzPI;IA2PL0B,oBAAoB,WAAAA,qBAAC1B,KAAD,EAAQ;MAC1B,IAAM7C,SAAS,GAAG6C,KAAK,CAACf,MAAN,CAAae,KAAK,CAACtB,KAAnB,EAA0BvB,SAA5C;MACAhC,SAAS,CACPgC,SADO,yCAAAN,MAAA,CAEgCmD,KAAK,CAACtB,KAFtC,gGAAT;MAKA,IAAMX,WAAW,GAAGd,YAAY,CAACE,SAAD,CAAhC;MACA,IAAIY,WAAJ,EAAiB;QACf,OAAOA,WAAW,CAAC2D,oBAAZ,CAAiC1B,KAAK,CAACf,MAAN,CAAae,KAAK,CAACtB,KAAnB,CAAjC,CAAP;MACD;MACD,OAAOtD,qBAAqB,CAACQ,YAAD,EAAeuB,SAAf,CAA5B;IACD,CAvQI;IAyQLwE,wBAAwB,WAAAA,yBAACxE,SAAD,EAAY;MAClC,OAAO/B,qBAAqB,CAACQ,YAAD,EAAeuB,SAAf,CAA5B;IACD,CA3QI;IA6QLyE,wBAAwB,WAAAA,yBAAC5B,KAAD,EAAQ;MAC9B,IAAMH,KAAK,GAAGG,KAAK,CAACf,MAAN,CAAae,KAAK,CAACtB,KAAnB,CAAd;MACA,OAAOf,wBAAwB,CAACkC,KAAD,CAA/B;IACD,CAhRI;IAkRLjC,yBAAyB,WAAAA,0BAACiE,IAAD,EAAOtE,MAAP,EAAe;MACtC,OAAOK,0BAAyB,CAACiE,IAAD,EAAOtE,MAAP,CAAhC;IACD,CApRI;IAsRLuE,gBAAgB,EAAEzG,kBAAkB,CAClCO,YADkC,EAElCC,MAAM,CAACkG,wBAF2B;EAtR/B,CAAP;AA2RD,CA1ZD"},"metadata":{},"sourceType":"module","externalDependencies":[]}