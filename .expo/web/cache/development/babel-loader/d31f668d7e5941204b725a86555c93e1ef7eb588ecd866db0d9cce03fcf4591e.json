{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as NavigationActions from \"../NavigationActions\";\nimport * as StackActions from \"./StackActions\";\nimport createConfigGetter from \"./createConfigGetter\";\nimport getScreenForRouteName from \"./getScreenForRouteName\";\nimport StateUtils from \"../StateUtils\";\nimport validateRouteConfigMap from \"./validateRouteConfigMap\";\nimport invariant from \"../utils/invariant\";\nimport { generateKey } from \"./KeyGenerator\";\nimport { createPathParser } from \"./pathUtils\";\nfunction behavesLikePushAction(action) {\n  return action.type === NavigationActions.NAVIGATE || action.type === StackActions.PUSH;\n}\nvar defaultActionCreators = function defaultActionCreators() {\n  return {};\n};\nfunction isResetToRootStack(action) {\n  return action.type === StackActions.RESET && action.key === null;\n}\nexport default (function (routeConfigs) {\n  var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  validateRouteConfigMap(routeConfigs);\n  var childRouters = {};\n  var routeNames = Object.keys(routeConfigs);\n  routeNames.forEach(function (routeName) {\n    var routeConfig = routeConfigs[routeName];\n    var screen = routeConfig && routeConfig.screen ? routeConfig.screen : routeConfig;\n    if (screen && screen.router) {\n      childRouters[routeName] = screen.router;\n    } else {\n      childRouters[routeName] = null;\n    }\n  });\n  var initialRouteParams = stackConfig.initialRouteParams;\n  var getCustomActionCreators = stackConfig.getCustomActionCreators || defaultActionCreators;\n  var initialRouteName = stackConfig.initialRouteName || routeNames[0];\n  var initialChildRouter = childRouters[initialRouteName];\n  function getInitialState(action) {\n    var route = {};\n    var childRouter = childRouters[action.routeName];\n    if (behavesLikePushAction(action) && childRouter !== undefined) {\n      var childState = {};\n      if (childRouter !== null) {\n        var childAction = action.action || NavigationActions.init({\n          params: action.params\n        });\n        childState = childRouter.getStateForAction(childAction);\n      }\n      return {\n        key: 'StackRouterRoot',\n        isTransitioning: false,\n        index: 0,\n        routes: [_objectSpread(_objectSpread({\n          params: action.params\n        }, childState), {}, {\n          key: action.key || generateKey(),\n          routeName: action.routeName\n        })]\n      };\n    }\n    if (initialChildRouter) {\n      route = initialChildRouter.getStateForAction(NavigationActions.navigate({\n        routeName: initialRouteName,\n        params: initialRouteParams\n      }));\n    }\n    var params = (routeConfigs[initialRouteName].params || route.params || action.params || initialRouteParams) && _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, routeConfigs[initialRouteName].params || {}), route.params || {}), action.params || {}), initialRouteParams || {});\n    var initialRouteKey = stackConfig.initialRouteKey;\n    route = _objectSpread(_objectSpread(_objectSpread({}, route), params ? {\n      params: params\n    } : {}), {}, {\n      routeName: initialRouteName,\n      key: action.key || initialRouteKey || generateKey()\n    });\n    return {\n      key: 'StackRouterRoot',\n      isTransitioning: false,\n      index: 0,\n      routes: [route]\n    };\n  }\n  function getParamsForRouteAndAction(routeName, action) {\n    var routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return _objectSpread(_objectSpread({}, routeConfig.params), action.params);\n    } else {\n      return action.params;\n    }\n  }\n  var _createPathParser = createPathParser(childRouters, routeConfigs, stackConfig),\n    getPathAndParamsForRoute = _createPathParser.getPathAndParamsForRoute,\n    _getActionForPathAndParams = _createPathParser.getActionForPathAndParams;\n  return {\n    childRouters: childRouters,\n    getComponentForState: function getComponentForState(state) {\n      var activeChildRoute = state.routes[state.index];\n      var routeName = activeChildRoute.routeName;\n      if (childRouters[routeName]) {\n        return childRouters[routeName].getComponentForState(activeChildRoute);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getComponentForRouteName: function getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getActionCreators: function getActionCreators(route, navStateKey) {\n      return _objectSpread(_objectSpread({}, getCustomActionCreators(route, navStateKey)), {}, {\n        pop: function pop(n, params) {\n          return StackActions.pop(_objectSpread({\n            n: n\n          }, params));\n        },\n        popToTop: function popToTop(params) {\n          return StackActions.popToTop(params);\n        },\n        push: function push(routeName, params, action) {\n          return StackActions.push({\n            routeName: routeName,\n            params: params,\n            action: action\n          });\n        },\n        replace: function replace(replaceWith, params, action, newKey) {\n          if (typeof replaceWith === 'string') {\n            return StackActions.replace({\n              routeName: replaceWith,\n              params: params,\n              action: action,\n              key: route.key,\n              newKey: newKey\n            });\n          }\n          invariant(typeof replaceWith === 'object', 'Must replaceWith an object or a string');\n          invariant(params == null, 'Params must not be provided to .replace() when specifying an object');\n          invariant(action == null, 'Child action must not be provided to .replace() when specifying an object');\n          invariant(newKey == null, 'Child action must not be provided to .replace() when specifying an object');\n          return StackActions.replace(replaceWith);\n        },\n        reset: function reset(actions, index) {\n          return StackActions.reset({\n            actions: actions,\n            index: index == null ? actions.length - 1 : index,\n            key: navStateKey\n          });\n        },\n        dismiss: function dismiss() {\n          return NavigationActions.back({\n            key: navStateKey\n          });\n        }\n      });\n    },\n    getStateForAction: function getStateForAction(action, state) {\n      if (!state) {\n        return getInitialState(action);\n      }\n      var activeChildRoute = state.routes[state.index];\n      if (!isResetToRootStack(action) && action.type !== NavigationActions.NAVIGATE) {\n        var activeChildRouter = childRouters[activeChildRoute.routeName];\n        if (activeChildRouter) {\n          var route = activeChildRouter.getStateForAction(action, activeChildRoute);\n          if (route !== null && route !== activeChildRoute) {\n            return StateUtils.replaceAt(state, activeChildRoute.key, route, action.type === NavigationActions.SET_PARAMS);\n          }\n        }\n      } else if (action.type === NavigationActions.NAVIGATE) {\n        for (var childRoute of state.routes.slice().reverse()) {\n          var childRouter = childRouters[childRoute.routeName];\n          var childAction = action.routeName === childRoute.routeName && action.action ? action.action : action;\n          if (childRouter) {\n            var nextRouteState = childRouter.getStateForAction(childAction, childRoute);\n            if (nextRouteState === null || nextRouteState !== childRoute) {\n              var newState = StateUtils.replaceAndPrune(state, nextRouteState ? nextRouteState.key : childRoute.key, nextRouteState ? nextRouteState : childRoute);\n              return _objectSpread(_objectSpread({}, newState), {}, {\n                isTransitioning: state.index !== newState.index ? action.immediate !== true : state.isTransitioning\n              });\n            }\n          }\n        }\n      }\n      if (behavesLikePushAction(action) && childRouters[action.routeName] !== undefined) {\n        var _childRouter = childRouters[action.routeName];\n        var _route;\n        invariant(action.type !== StackActions.PUSH || action.key == null, 'StackRouter does not support key on the push action');\n        var lastRouteIndex = state.routes.findIndex(function (r) {\n          if (action.key) {\n            return r.key === action.key;\n          } else {\n            return r.routeName === action.routeName;\n          }\n        });\n        if (action.type !== StackActions.PUSH && lastRouteIndex !== -1) {\n          if (state.index === lastRouteIndex && !action.params) {\n            return null;\n          }\n          var routes = state.routes.slice(0, lastRouteIndex + 1);\n          if (action.params) {\n            var _route2 = state.routes[lastRouteIndex];\n            routes[lastRouteIndex] = _objectSpread(_objectSpread({}, _route2), {}, {\n              params: _objectSpread(_objectSpread({}, _route2.params), action.params)\n            });\n          }\n          return _objectSpread(_objectSpread({}, state), {}, {\n            isTransitioning: state.index !== lastRouteIndex ? action.immediate !== true : state.isTransitioning,\n            index: lastRouteIndex,\n            routes: routes\n          });\n        }\n        if (_childRouter) {\n          var _childAction = action.action || NavigationActions.init({\n            params: getParamsForRouteAndAction(action.routeName, action)\n          });\n          _route = _objectSpread(_objectSpread({\n            params: getParamsForRouteAndAction(action.routeName, action)\n          }, _childRouter.getStateForAction(_childAction)), {}, {\n            routeName: action.routeName,\n            key: action.key || generateKey()\n          });\n        } else {\n          _route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            routeName: action.routeName,\n            key: action.key || generateKey()\n          };\n        }\n        return _objectSpread(_objectSpread({}, StateUtils.push(state, _route)), {}, {\n          isTransitioning: action.immediate !== true\n        });\n      } else if (action.type === StackActions.PUSH && childRouters[action.routeName] === undefined) {\n        return state;\n      }\n      if (behavesLikePushAction(action)) {\n        var childRouterNames = Object.keys(childRouters);\n        for (var i = 0; i < childRouterNames.length; i++) {\n          var childRouterName = childRouterNames[i];\n          var _childRouter2 = childRouters[childRouterName];\n          if (_childRouter2) {\n            var initChildRoute = _childRouter2.getStateForAction(NavigationActions.init());\n            var navigatedChildRoute = _childRouter2.getStateForAction(action, initChildRoute);\n            var routeToPush = null;\n            if (navigatedChildRoute === null) {\n              routeToPush = initChildRoute;\n            } else if (navigatedChildRoute !== initChildRoute) {\n              routeToPush = navigatedChildRoute;\n            }\n            if (routeToPush) {\n              var _route3 = _objectSpread(_objectSpread({}, routeToPush), {}, {\n                routeName: childRouterName,\n                key: action.key || generateKey()\n              });\n              return _objectSpread(_objectSpread({}, StateUtils.push(state, _route3)), {}, {\n                isTransitioning: action.immediate !== true\n              });\n            }\n          }\n        }\n      }\n      if (action.type === StackActions.POP_TO_TOP) {\n        if (action.key && state.key !== action.key) {\n          return state;\n        }\n        if (state.index > 0) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            isTransitioning: action.immediate !== true,\n            index: 0,\n            routes: [state.routes[0]]\n          });\n        }\n        return state;\n      }\n      if (action.type === StackActions.REPLACE) {\n        var routeIndex;\n        if (action.key === undefined && state.routes.length) {\n          routeIndex = state.routes.length - 1;\n        } else {\n          routeIndex = state.routes.findIndex(function (r) {\n            return r.key === action.key;\n          });\n        }\n        if (routeIndex !== -1) {\n          var _childRouter3 = childRouters[action.routeName];\n          var childState = {};\n          if (_childRouter3) {\n            var _childAction2 = action.action || NavigationActions.init({\n              params: getParamsForRouteAndAction(action.routeName, action)\n            });\n            childState = _childRouter3.getStateForAction(_childAction2);\n          }\n          var _routes = _toConsumableArray(state.routes);\n          _routes[routeIndex] = _objectSpread(_objectSpread({\n            params: getParamsForRouteAndAction(action.routeName, action)\n          }, childState), {}, {\n            routeName: action.routeName,\n            key: action.newKey || generateKey()\n          });\n          return _objectSpread(_objectSpread({}, state), {}, {\n            routes: _routes\n          });\n        }\n      }\n      if (action.type === StackActions.COMPLETE_TRANSITION && (action.key == null || action.key === state.key) && action.toChildKey === state.routes[state.index].key && state.isTransitioning) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isTransitioning: false\n        });\n      }\n      if (action.type === NavigationActions.SET_PARAMS) {\n        var key = action.key;\n        var lastRoute = state.routes.find(function (route) {\n          return route.key === key;\n        });\n        if (lastRoute) {\n          var params = _objectSpread(_objectSpread({}, lastRoute.params), action.params);\n          var _routes2 = _toConsumableArray(state.routes);\n          _routes2[state.routes.indexOf(lastRoute)] = _objectSpread(_objectSpread({}, lastRoute), {}, {\n            params: params\n          });\n          return _objectSpread(_objectSpread({}, state), {}, {\n            routes: _routes2\n          });\n        }\n      }\n      if (action.type === StackActions.RESET) {\n        if (action.key != null && action.key !== state.key) {\n          return state;\n        }\n        var newStackActions = action.actions;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          routes: newStackActions.map(function (newStackAction) {\n            var router = childRouters[newStackAction.routeName];\n            var childState = {};\n            if (router) {\n              var _childAction3 = newStackAction.action || NavigationActions.init({\n                params: getParamsForRouteAndAction(newStackAction.routeName, newStackAction)\n              });\n              childState = router.getStateForAction(_childAction3);\n            }\n            return _objectSpread(_objectSpread({\n              params: getParamsForRouteAndAction(newStackAction.routeName, newStackAction)\n            }, childState), {}, {\n              routeName: newStackAction.routeName,\n              key: newStackAction.key || generateKey()\n            });\n          }),\n          index: action.index\n        });\n      }\n      if (action.type === NavigationActions.BACK || action.type === StackActions.POP) {\n        var _key = action.key,\n          n = action.n,\n          immediate = action.immediate,\n          prune = action.prune;\n        if (action.type === StackActions.POP && prune === false && _key) {\n          var index = state.routes.findIndex(function (r) {\n            return r.key === _key;\n          });\n          if (index > 0) {\n            var count = Math.max(index - (n !== null && n !== void 0 ? n : 1) + 1, 1);\n            var _routes3 = state.routes.slice(0, count).concat(state.routes.slice(index + 1));\n            if (_routes3.length) {\n              return _objectSpread(_objectSpread({}, state), {}, {\n                routes: _routes3,\n                index: _routes3.length - 1,\n                isTransitioning: immediate !== true\n              });\n            }\n          }\n        } else {\n          var backRouteIndex = state.index;\n          if (action.type === StackActions.POP && n != null) {\n            backRouteIndex = Math.max(1, state.index - n + 1);\n          } else if (_key) {\n            var backRoute = state.routes.find(function (route) {\n              return route.key === _key;\n            });\n            backRouteIndex = state.routes.indexOf(backRoute);\n          }\n          if (backRouteIndex > 0) {\n            return _objectSpread(_objectSpread({}, state), {}, {\n              routes: state.routes.slice(0, backRouteIndex),\n              index: backRouteIndex - 1,\n              isTransitioning: immediate !== true\n            });\n          }\n        }\n      }\n      var keyIndex = action.key ? StateUtils.indexOf(state, action.key) : -1;\n      for (var _childRoute of state.routes.slice().reverse()) {\n        if (_childRoute.key === activeChildRoute.key) {\n          continue;\n        }\n        if (keyIndex >= 0 && _childRoute.key !== action.key) {\n          continue;\n        }\n        var _childRouter4 = childRouters[_childRoute.routeName];\n        if (_childRouter4) {\n          var _route4 = _childRouter4.getStateForAction(action, _childRoute);\n          if (_route4 === null) {\n            return state;\n          } else if (_route4 && _route4 !== _childRoute) {\n            return StateUtils.replaceAt(state, _childRoute.key, _route4, action.preserveFocus || action.type.includes('DRAWER'));\n          }\n        }\n      }\n      return state;\n    },\n    getPathAndParamsForState: function getPathAndParamsForState(state) {\n      var route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n    getActionForPathAndParams: function getActionForPathAndParams(path, params) {\n      return _getActionForPathAndParams(path, params);\n    },\n    getScreenOptions: createConfigGetter(routeConfigs, stackConfig.defaultNavigationOptions)\n  };\n});","map":{"version":3,"names":["NavigationActions","StackActions","createConfigGetter","getScreenForRouteName","StateUtils","validateRouteConfigMap","invariant","generateKey","createPathParser","behavesLikePushAction","action","type","NAVIGATE","PUSH","defaultActionCreators","isResetToRootStack","RESET","key","routeConfigs","stackConfig","arguments","length","undefined","childRouters","routeNames","Object","keys","forEach","routeName","routeConfig","screen","router","initialRouteParams","getCustomActionCreators","initialRouteName","initialChildRouter","getInitialState","route","childRouter","childState","childAction","init","params","getStateForAction","isTransitioning","index","routes","_objectSpread","navigate","initialRouteKey","getParamsForRouteAndAction","_createPathParser","getPathAndParamsForRoute","getActionForPathAndParams","getComponentForState","state","activeChildRoute","getComponentForRouteName","getActionCreators","navStateKey","pop","n","popToTop","push","replace","replaceWith","newKey","reset","actions","dismiss","back","activeChildRouter","replaceAt","SET_PARAMS","childRoute","slice","reverse","nextRouteState","newState","replaceAndPrune","immediate","lastRouteIndex","findIndex","r","childRouterNames","i","childRouterName","initChildRoute","navigatedChildRoute","routeToPush","POP_TO_TOP","REPLACE","routeIndex","_toConsumableArray","COMPLETE_TRANSITION","toChildKey","lastRoute","find","indexOf","newStackActions","map","newStackAction","BACK","POP","prune","count","Math","max","concat","backRouteIndex","backRoute","keyIndex","preserveFocus","includes","getPathAndParamsForState","path","getScreenOptions","defaultNavigationOptions"],"sources":["C:\\Users\\filiz\\OneDrive\\Desktop\\versionthree\\Cashback-Calculator-Mobile-App\\node_modules\\react-navigation\\node_modules\\@react-navigation\\core\\lib\\module\\routers\\StackRouter.js"],"sourcesContent":["import * as NavigationActions from '../NavigationActions';\nimport * as StackActions from './StackActions';\nimport createConfigGetter from './createConfigGetter';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport StateUtils from '../StateUtils';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport invariant from '../utils/invariant';\nimport { generateKey } from './KeyGenerator';\nimport { createPathParser } from './pathUtils';\n\nfunction behavesLikePushAction(action) {\n  return (\n    action.type === NavigationActions.NAVIGATE ||\n    action.type === StackActions.PUSH\n  );\n}\n\nconst defaultActionCreators = () => ({});\n\nfunction isResetToRootStack(action) {\n  return action.type === StackActions.RESET && action.key === null;\n}\n\nexport default (routeConfigs, stackConfig = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const childRouters = {};\n  const routeNames = Object.keys(routeConfigs);\n\n  // Loop through routes and find child routers\n  routeNames.forEach((routeName) => {\n    // We're not using `getScreenForRouteName` here to preserve the lazy loading\n    // behaviour of routes. This means that routes with child routers must be\n    // defined using a component directly or with an object with a screen prop.\n    const routeConfig = routeConfigs[routeName];\n    const screen =\n      routeConfig && routeConfig.screen ? routeConfig.screen : routeConfig;\n    if (screen && screen.router) {\n      // If it has a router it's a navigator.\n      childRouters[routeName] = screen.router;\n    } else {\n      // If it doesn't have router it's an ordinary React component.\n      childRouters[routeName] = null;\n    }\n  });\n\n  const { initialRouteParams } = stackConfig;\n  const getCustomActionCreators =\n    stackConfig.getCustomActionCreators || defaultActionCreators;\n\n  const initialRouteName = stackConfig.initialRouteName || routeNames[0];\n\n  const initialChildRouter = childRouters[initialRouteName];\n\n  function getInitialState(action) {\n    let route = {};\n    const childRouter = childRouters[action.routeName];\n\n    // This is a push-like action, and childRouter will be a router or null if we are responsible for this routeName\n    if (behavesLikePushAction(action) && childRouter !== undefined) {\n      let childState = {};\n      // The router is null for normal leaf routes\n      if (childRouter !== null) {\n        const childAction =\n          action.action || NavigationActions.init({ params: action.params });\n        childState = childRouter.getStateForAction(childAction);\n      }\n\n      return {\n        key: 'StackRouterRoot',\n        isTransitioning: false,\n        index: 0,\n        routes: [\n          {\n            params: action.params,\n            ...childState,\n            key: action.key || generateKey(),\n            routeName: action.routeName,\n          },\n        ],\n      };\n    }\n\n    if (initialChildRouter) {\n      route = initialChildRouter.getStateForAction(\n        NavigationActions.navigate({\n          routeName: initialRouteName,\n          params: initialRouteParams,\n        })\n      );\n    }\n    const params = (routeConfigs[initialRouteName].params ||\n      route.params ||\n      action.params ||\n      initialRouteParams) && {\n      ...(routeConfigs[initialRouteName].params || {}),\n      ...(route.params || {}),\n      ...(action.params || {}),\n      ...(initialRouteParams || {}),\n    };\n    const { initialRouteKey } = stackConfig;\n    route = {\n      ...route,\n      ...(params ? { params } : {}),\n      routeName: initialRouteName,\n      key: action.key || initialRouteKey || generateKey(),\n    };\n    return {\n      key: 'StackRouterRoot',\n      isTransitioning: false,\n      index: 0,\n      routes: [route],\n    };\n  }\n\n  function getParamsForRouteAndAction(routeName, action) {\n    let routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return { ...routeConfig.params, ...action.params };\n    } else {\n      return action.params;\n    }\n  }\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, stackConfig);\n\n  return {\n    childRouters,\n\n    getComponentForState(state) {\n      const activeChildRoute = state.routes[state.index];\n      const { routeName } = activeChildRoute;\n      if (childRouters[routeName]) {\n        return childRouters[routeName].getComponentForState(activeChildRoute);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getActionCreators(route, navStateKey) {\n      return {\n        ...getCustomActionCreators(route, navStateKey),\n        pop: (n, params) =>\n          StackActions.pop({\n            n,\n            ...params,\n          }),\n        popToTop: (params) => StackActions.popToTop(params),\n        push: (routeName, params, action) =>\n          StackActions.push({\n            routeName,\n            params,\n            action,\n          }),\n        replace: (replaceWith, params, action, newKey) => {\n          if (typeof replaceWith === 'string') {\n            return StackActions.replace({\n              routeName: replaceWith,\n              params,\n              action,\n              key: route.key,\n              newKey,\n            });\n          }\n          invariant(\n            typeof replaceWith === 'object',\n            'Must replaceWith an object or a string'\n          );\n          invariant(\n            params == null,\n            'Params must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            action == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            newKey == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          return StackActions.replace(replaceWith);\n        },\n        reset: (actions, index) =>\n          StackActions.reset({\n            actions,\n            index: index == null ? actions.length - 1 : index,\n            key: navStateKey,\n          }),\n        dismiss: () =>\n          NavigationActions.back({\n            key: navStateKey,\n          }),\n      };\n    },\n\n    getStateForAction(action, state) {\n      // Set up the initial state if needed\n      if (!state) {\n        return getInitialState(action);\n      }\n\n      const activeChildRoute = state.routes[state.index];\n\n      if (\n        !isResetToRootStack(action) &&\n        action.type !== NavigationActions.NAVIGATE\n      ) {\n        // Let the active child router handle the action\n        const activeChildRouter = childRouters[activeChildRoute.routeName];\n        if (activeChildRouter) {\n          const route = activeChildRouter.getStateForAction(\n            action,\n            activeChildRoute\n          );\n          if (route !== null && route !== activeChildRoute) {\n            return StateUtils.replaceAt(\n              state,\n              activeChildRoute.key,\n              route,\n              // the following tells replaceAt to NOT change the index to this route for the setParam action, because people don't expect param-setting actions to switch the active route\n              action.type === NavigationActions.SET_PARAMS\n            );\n          }\n        }\n      } else if (action.type === NavigationActions.NAVIGATE) {\n        // Traverse routes from the top of the stack to the bottom, so the\n        // active route has the first opportunity, then the one before it, etc.\n\n        for (let childRoute of state.routes.slice().reverse()) {\n          let childRouter = childRouters[childRoute.routeName];\n          let childAction =\n            action.routeName === childRoute.routeName && action.action\n              ? action.action\n              : action;\n\n          if (childRouter) {\n            const nextRouteState = childRouter.getStateForAction(\n              childAction,\n              childRoute\n            );\n\n            if (nextRouteState === null || nextRouteState !== childRoute) {\n              const newState = StateUtils.replaceAndPrune(\n                state,\n                nextRouteState ? nextRouteState.key : childRoute.key,\n                nextRouteState ? nextRouteState : childRoute\n              );\n              return {\n                ...newState,\n                isTransitioning:\n                  state.index !== newState.index\n                    ? action.immediate !== true\n                    : state.isTransitioning,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle push and navigate actions. This must happen after the focused\n      // child router has had a chance to handle the action.\n      if (\n        behavesLikePushAction(action) &&\n        childRouters[action.routeName] !== undefined // undefined means it's not a childRouter or a screen\n      ) {\n        const childRouter = childRouters[action.routeName];\n        let route;\n\n        invariant(\n          action.type !== StackActions.PUSH || action.key == null,\n          'StackRouter does not support key on the push action'\n        );\n\n        // Before pushing a new route we first try to find one in the existing route stack\n        // More information on this: https://github.com/react-navigation/rfcs/blob/master/text/0004-less-pushy-navigate.md\n        const lastRouteIndex = state.routes.findIndex((r) => {\n          if (action.key) {\n            return r.key === action.key;\n          } else {\n            return r.routeName === action.routeName;\n          }\n        });\n\n        // An instance of this route exists already and we're dealing with a navigate action\n        if (action.type !== StackActions.PUSH && lastRouteIndex !== -1) {\n          // If index is unchanged and params are not being set, leave state identity intact\n          if (state.index === lastRouteIndex && !action.params) {\n            return null;\n          }\n\n          // Remove the now unused routes at the tail of the routes array\n          const routes = state.routes.slice(0, lastRouteIndex + 1);\n\n          // Apply params if provided, otherwise leave route identity intact\n          if (action.params) {\n            const route = state.routes[lastRouteIndex];\n            routes[lastRouteIndex] = {\n              ...route,\n              params: {\n                ...route.params,\n                ...action.params,\n              },\n            };\n          }\n          // Return state with new index. Change isTransitioning only if index has changed\n          return {\n            ...state,\n            isTransitioning:\n              state.index !== lastRouteIndex\n                ? action.immediate !== true\n                : state.isTransitioning,\n            index: lastRouteIndex,\n            routes,\n          };\n        }\n\n        if (childRouter) {\n          // Delegate to the child router with the given action, or init it\n          const childAction =\n            action.action ||\n            NavigationActions.init({\n              params: getParamsForRouteAndAction(action.routeName, action),\n            });\n          route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            // note(brentvatne): does it make sense to wipe out the params\n            // here? or even to add params at all? need more info about what\n            // this solves\n            ...childRouter.getStateForAction(childAction),\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        } else {\n          // Create the route from scratch\n          route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        }\n        return {\n          ...StateUtils.push(state, route),\n          isTransitioning: action.immediate !== true,\n        };\n      } else if (\n        action.type === StackActions.PUSH &&\n        childRouters[action.routeName] === undefined\n      ) {\n        // Return the state identity to bubble the action up\n        return state;\n      }\n\n      // Handle navigation to other child routers that are not yet pushed\n      if (behavesLikePushAction(action)) {\n        const childRouterNames = Object.keys(childRouters);\n        for (let i = 0; i < childRouterNames.length; i++) {\n          const childRouterName = childRouterNames[i];\n          const childRouter = childRouters[childRouterName];\n          if (childRouter) {\n            // For each child router, start with a blank state\n            const initChildRoute = childRouter.getStateForAction(\n              NavigationActions.init()\n            );\n            // Then check to see if the router handles our navigate action\n            const navigatedChildRoute = childRouter.getStateForAction(\n              action,\n              initChildRoute\n            );\n            let routeToPush = null;\n            if (navigatedChildRoute === null) {\n              // Push the route if the router has 'handled' the action and returned null\n              routeToPush = initChildRoute;\n            } else if (navigatedChildRoute !== initChildRoute) {\n              // Push the route if the state has changed in response to this navigation\n              routeToPush = navigatedChildRoute;\n            }\n            if (routeToPush) {\n              const route = {\n                ...routeToPush,\n                routeName: childRouterName,\n                key: action.key || generateKey(),\n              };\n              return {\n                ...StateUtils.push(state, route),\n                isTransitioning: action.immediate !== true,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle pop-to-top behavior. Make sure this happens after children have had a chance to handle the action, so that the inner stack pops to top first.\n      if (action.type === StackActions.POP_TO_TOP) {\n        // Refuse to handle pop to top if a key is given that doesn't correspond\n        // to this router\n        if (action.key && state.key !== action.key) {\n          return state;\n        }\n\n        // If we're already at the top, then we return the state with a new\n        // identity so that the action is handled by this router.\n        if (state.index > 0) {\n          return {\n            ...state,\n            isTransitioning: action.immediate !== true,\n            index: 0,\n            routes: [state.routes[0]],\n          };\n        }\n        return state;\n      }\n\n      // Handle replace action\n      if (action.type === StackActions.REPLACE) {\n        let routeIndex;\n\n        // If the key param is undefined, set the index to the last route in the stack\n        if (action.key === undefined && state.routes.length) {\n          routeIndex = state.routes.length - 1;\n        } else {\n          routeIndex = state.routes.findIndex((r) => r.key === action.key);\n        }\n\n        // Only replace if the key matches one of our routes\n        if (routeIndex !== -1) {\n          const childRouter = childRouters[action.routeName];\n          let childState = {};\n          if (childRouter) {\n            const childAction =\n              action.action ||\n              NavigationActions.init({\n                params: getParamsForRouteAndAction(action.routeName, action),\n              });\n            childState = childRouter.getStateForAction(childAction);\n          }\n          const routes = [...state.routes];\n          routes[routeIndex] = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            // merge the child state in this order to allow params override\n            ...childState,\n            routeName: action.routeName,\n            key: action.newKey || generateKey(),\n          };\n          return { ...state, routes };\n        }\n      }\n\n      // Update transitioning state\n      if (\n        action.type === StackActions.COMPLETE_TRANSITION &&\n        (action.key == null || action.key === state.key) &&\n        action.toChildKey === state.routes[state.index].key &&\n        state.isTransitioning\n      ) {\n        return {\n          ...state,\n          isTransitioning: false,\n        };\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find((route) => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return {\n            ...state,\n            routes,\n          };\n        }\n      }\n\n      if (action.type === StackActions.RESET) {\n        // Only handle reset actions that are unspecified or match this state key\n        if (action.key != null && action.key !== state.key) {\n          // Deliberately use != instead of !== so we can match null with\n          // undefined on either the state or the action\n          return state;\n        }\n        const newStackActions = action.actions;\n\n        return {\n          ...state,\n          routes: newStackActions.map((newStackAction) => {\n            const router = childRouters[newStackAction.routeName];\n\n            let childState = {};\n\n            if (router) {\n              const childAction =\n                newStackAction.action ||\n                NavigationActions.init({\n                  params: getParamsForRouteAndAction(\n                    newStackAction.routeName,\n                    newStackAction\n                  ),\n                });\n\n              childState = router.getStateForAction(childAction);\n            }\n\n            return {\n              params: getParamsForRouteAndAction(\n                newStackAction.routeName,\n                newStackAction\n              ),\n              ...childState,\n              routeName: newStackAction.routeName,\n              key: newStackAction.key || generateKey(),\n            };\n          }),\n          index: action.index,\n        };\n      }\n\n      if (\n        action.type === NavigationActions.BACK ||\n        action.type === StackActions.POP\n      ) {\n        const { key, n, immediate, prune } = action;\n\n        if (action.type === StackActions.POP && prune === false && key) {\n          const index = state.routes.findIndex((r) => r.key === key);\n\n          if (index > 0) {\n            const count = Math.max(index - (n ?? 1) + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            if (routes.length) {\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1,\n                isTransitioning: immediate !== true,\n              };\n            }\n          }\n        } else {\n          let backRouteIndex = state.index;\n\n          if (action.type === StackActions.POP && n != null) {\n            // determine the index to go back *from*. In this case, n=1 means to go\n            // back from state.index, as if it were a normal \"BACK\" action\n            backRouteIndex = Math.max(1, state.index - n + 1);\n          } else if (key) {\n            const backRoute = state.routes.find((route) => route.key === key);\n            backRouteIndex = state.routes.indexOf(backRoute);\n          }\n\n          if (backRouteIndex > 0) {\n            return {\n              ...state,\n              routes: state.routes.slice(0, backRouteIndex),\n              index: backRouteIndex - 1,\n              isTransitioning: immediate !== true,\n            };\n          }\n        }\n      }\n\n      // By this point in the router's state handling logic, we have handled the behavior of the active route, and handled any stack actions.\n      // If we haven't returned by now, we should allow non-active child routers to handle this action, and switch to that index if the child state (route) does change..\n\n      const keyIndex = action.key ? StateUtils.indexOf(state, action.key) : -1;\n\n      // Traverse routes from the top of the stack to the bottom, so the\n      // active route has the first opportunity, then the one before it, etc.\n      for (let childRoute of state.routes.slice().reverse()) {\n        if (childRoute.key === activeChildRoute.key) {\n          // skip over the active child because we let it attempt to handle the action earlier\n          continue;\n        }\n        // If a key is provided and in routes state then let's use that\n        // knowledge to skip extra getStateForAction calls on other child\n        // routers\n        if (keyIndex >= 0 && childRoute.key !== action.key) {\n          continue;\n        }\n        let childRouter = childRouters[childRoute.routeName];\n        if (childRouter) {\n          const route = childRouter.getStateForAction(action, childRoute);\n\n          if (route === null) {\n            return state;\n          } else if (route && route !== childRoute) {\n            return StateUtils.replaceAt(\n              state,\n              childRoute.key,\n              route,\n              // People don't expect these actions to switch the active route\n              // TODO: We should switch to action.preserveFocus: true for drawer in future\n              action.preserveFocus || action.type.includes('DRAWER')\n            );\n          }\n        }\n      }\n\n      return state;\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      stackConfig.defaultNavigationOptions\n    ),\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}