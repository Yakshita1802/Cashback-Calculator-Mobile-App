{"ast":null,"code":"import { isValidElementType } from 'react-is';\nimport invariant from \"../utils/invariant\";\nfunction validateRouteConfigMap(routeConfigs) {\n  var routeNames = Object.keys(routeConfigs);\n  invariant(routeNames.length > 0, 'Please specify at least one route when configuring a navigator.');\n  routeNames.forEach(function (routeName) {\n    var routeConfig = routeConfigs[routeName];\n    var screenComponent = getScreenComponent(routeConfig);\n    if (!screenComponent || !isValidElementType(screenComponent) && !routeConfig.getScreen) {\n      throw new Error(\"The component for route '\".concat(routeName, \"' must be a React component. For example:\\n\\nimport MyScreen from './MyScreen';\\n...\\n\").concat(routeName, \": MyScreen,\\n}\\n\\nYou can also use a navigator:\\n\\nimport MyNavigator from './MyNavigator';\\n...\\n\").concat(routeName, \": MyNavigator,\\n}\"));\n    }\n    if (routeConfig.screen && routeConfig.getScreen) {\n      throw new Error(\"Route '\".concat(routeName, \"' should declare a screen or a getScreen, not both.\"));\n    }\n  });\n}\nfunction getScreenComponent(routeConfig) {\n  if (!routeConfig) {\n    return null;\n  }\n  return routeConfig.screen ? routeConfig.screen : routeConfig;\n}\nexport default validateRouteConfigMap;","map":{"version":3,"names":["isValidElementType","invariant","validateRouteConfigMap","routeConfigs","routeNames","Object","keys","length","forEach","routeName","routeConfig","screenComponent","getScreenComponent","getScreen","Error","concat","screen"],"sources":["C:\\Users\\filiz\\OneDrive\\Desktop\\versionthree\\Cashback-Calculator-Mobile-App\\node_modules\\react-navigation\\node_modules\\@react-navigation\\core\\lib\\module\\routers\\validateRouteConfigMap.js"],"sourcesContent":["import { isValidElementType } from 'react-is';\n\nimport invariant from '../utils/invariant';\n\n/**\n * Make sure the config passed e.g. to StackRouter, TabRouter has\n * the correct format, and throw a clear error if it doesn't.\n */\nfunction validateRouteConfigMap(routeConfigs) {\n  const routeNames = Object.keys(routeConfigs);\n  invariant(\n    routeNames.length > 0,\n    'Please specify at least one route when configuring a navigator.'\n  );\n\n  routeNames.forEach((routeName) => {\n    const routeConfig = routeConfigs[routeName];\n    const screenComponent = getScreenComponent(routeConfig);\n\n    if (\n      !screenComponent ||\n      (!isValidElementType(screenComponent) && !routeConfig.getScreen)\n    ) {\n      throw new Error(`The component for route '${routeName}' must be a React component. For example:\n\nimport MyScreen from './MyScreen';\n...\n${routeName}: MyScreen,\n}\n\nYou can also use a navigator:\n\nimport MyNavigator from './MyNavigator';\n...\n${routeName}: MyNavigator,\n}`);\n    }\n\n    if (routeConfig.screen && routeConfig.getScreen) {\n      throw new Error(\n        `Route '${routeName}' should declare a screen or a getScreen, not both.`\n      );\n    }\n  });\n}\n\nfunction getScreenComponent(routeConfig) {\n  if (!routeConfig) {\n    return null;\n  }\n\n  return routeConfig.screen ? routeConfig.screen : routeConfig;\n}\n\nexport default validateRouteConfigMap;\n"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,UAAnC;AAEA,OAAOC,SAAP;AAMA,SAASC,sBAATA,CAAgCC,YAAhC,EAA8C;EAC5C,IAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYH,YAAZ,CAAnB;EACAF,SAAS,CACPG,UAAU,CAACG,MAAX,GAAoB,CADb,EAEP,iEAFO,CAAT;EAKAH,UAAU,CAACI,OAAX,CAAoB,UAAAC,SAAD,EAAe;IAChC,IAAMC,WAAW,GAAGP,YAAY,CAACM,SAAD,CAAhC;IACA,IAAME,eAAe,GAAGC,kBAAkB,CAACF,WAAD,CAA1C;IAEA,IACE,CAACC,eAAD,IACC,CAACX,kBAAkB,CAACW,eAAD,CAAnB,IAAwC,CAACD,WAAW,CAACG,SAFxD,EAGE;MACA,MAAM,IAAIC,KAAJ,6BAAAC,MAAA,CAAsCN,SAAtC,4FAAAM,MAAA,CAIVN,SAJU,wGAAAM,MAAA,CAWVN,SAXU,uBAAN;IAaD;IAED,IAAIC,WAAW,CAACM,MAAZ,IAAsBN,WAAW,CAACG,SAAtC,EAAiD;MAC/C,MAAM,IAAIC,KAAJ,WAAAC,MAAA,CACMN,SADN,yDAAN;IAGD;EACF,CA5BD;AA6BD;AAED,SAASG,kBAATA,CAA4BF,WAA5B,EAAyC;EACvC,IAAI,CAACA,WAAL,EAAkB;IAChB,OAAO,IAAP;EACD;EAED,OAAOA,WAAW,CAACM,MAAZ,GAAqBN,WAAW,CAACM,MAAjC,GAA0CN,WAAjD;AACD;AAED,eAAeR,sBAAf"},"metadata":{},"sourceType":"module","externalDependencies":[]}