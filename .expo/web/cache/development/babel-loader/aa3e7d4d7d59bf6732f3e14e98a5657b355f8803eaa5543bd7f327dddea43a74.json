{"ast":null,"code":"import NativeReanimatedModule from \"./NativeReanimated\";\nimport { makeShareableCloneOnUIRecursive, makeShareableCloneRecursive, registerShareableMapping } from \"./shareables\";\nimport { runOnUI } from \"./threads\";\nimport { valueSetter } from \"./valueSetter\";\nexport { stopMapper } from \"./mappers\";\nexport function makeUIMutable(initial, syncDataHolder) {\n  'worklet';\n\n  var listeners = new Map();\n  var value = initial;\n  var self = {\n    set value(newValue) {\n      valueSetter(self, newValue);\n    },\n    get value() {\n      return value;\n    },\n    set _value(newValue) {\n      value = newValue;\n      if (syncDataHolder) {\n        _updateDataSynchronously(syncDataHolder, makeShareableCloneOnUIRecursive(newValue));\n      }\n      listeners.forEach(function (listener) {\n        listener(newValue);\n      });\n    },\n    get _value() {\n      return value;\n    },\n    addListener: function addListener(id, listener) {\n      listeners.set(id, listener);\n    },\n    removeListener: function removeListener(id) {\n      listeners.delete(id);\n    },\n    _animation: null,\n    _isReanimatedSharedValue: true\n  };\n  return self;\n}\nexport function makeMutable(initial) {\n  var oneWayReadsOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var value = initial;\n  var syncDataHolder;\n  if (!oneWayReadsOnly && NativeReanimatedModule.native) {\n    syncDataHolder = NativeReanimatedModule.makeSynchronizedDataHolder(makeShareableCloneRecursive(value));\n    registerShareableMapping(syncDataHolder);\n  }\n  var handle = makeShareableCloneRecursive({\n    __init: function __init() {\n      'worklet';\n\n      return makeUIMutable(initial, syncDataHolder);\n    }\n  });\n  var listeners = NativeReanimatedModule.native ? undefined : new Map();\n  var mutable = {\n    set value(newValue) {\n      if (NativeReanimatedModule.native) {\n        runOnUI(function () {\n          mutable.value = newValue;\n        })();\n      } else {\n        valueSetter(mutable, newValue);\n      }\n    },\n    get value() {\n      if (syncDataHolder) {\n        return NativeReanimatedModule.getDataSynchronously(syncDataHolder);\n      }\n      return value;\n    },\n    set _value(newValue) {\n      if (NativeReanimatedModule.native) {\n        throw new Error('Setting `_value` directly is only possible on the UI runtime');\n      }\n      value = newValue;\n      listeners.forEach(function (listener) {\n        listener(newValue);\n      });\n    },\n    get _value() {\n      if (NativeReanimatedModule.native) {\n        throw new Error('Reading from `_value` directly is only possible on the UI runtime');\n      }\n      return value;\n    },\n    modify: function modify(modifier) {\n      runOnUI(function () {\n        mutable.value = modifier(mutable.value);\n      })();\n    },\n    addListener: function addListener(id, listener) {\n      if (NativeReanimatedModule.native) {\n        throw new Error('adding listeners is only possible on the UI runtime');\n      }\n      listeners.set(id, listener);\n    },\n    removeListener: function removeListener(id) {\n      if (NativeReanimatedModule.native) {\n        throw new Error('removing listeners is only possible on the UI runtime');\n      }\n      listeners.delete(id);\n    },\n    _isReanimatedSharedValue: true\n  };\n  registerShareableMapping(mutable, handle);\n  return mutable;\n}\nexport function makeRemote() {\n  var initial = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var handle = makeShareableCloneRecursive({\n    __init: function __init() {\n      'worklet';\n\n      return initial;\n    }\n  });\n  registerShareableMapping(initial, handle);\n  return initial;\n}","map":{"version":3,"names":["NativeReanimatedModule","makeShareableCloneOnUIRecursive","makeShareableCloneRecursive","registerShareableMapping","runOnUI","valueSetter","stopMapper","makeUIMutable","initial","syncDataHolder","listeners","Map","value","self","newValue","_value","_updateDataSynchronously","forEach","listener","addListener","id","set","removeListener","delete","_animation","_isReanimatedSharedValue","makeMutable","oneWayReadsOnly","arguments","length","undefined","native","makeSynchronizedDataHolder","handle","__init","mutable","getDataSynchronously","Error","modify","modifier","makeRemote"],"sources":["C:\\Users\\filiz\\OneDrive\\Desktop\\versionthree\\Cashback-Calculator-Mobile-App\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\mutables.ts"],"sourcesContent":["import NativeReanimatedModule from './NativeReanimated';\nimport { SharedValue, ShareableSyncDataHolderRef } from './commonTypes';\nimport {\n  makeShareableCloneOnUIRecursive,\n  makeShareableCloneRecursive,\n  registerShareableMapping,\n} from './shareables';\nimport { runOnUI } from './threads';\nimport { valueSetter } from './valueSetter';\nexport { stopMapper } from './mappers';\n\nexport function makeUIMutable<T>(\n  initial: T,\n  syncDataHolder?: ShareableSyncDataHolderRef<T>\n) {\n  'worklet';\n\n  const listeners = new Map();\n  let value = initial;\n\n  const self = {\n    set value(newValue) {\n      valueSetter(self, newValue);\n    },\n    get value() {\n      return value;\n    },\n    /**\n     * _value prop should only be accessed by the valueSetter implementation\n     * which may make the decision about updating the mutable value depending\n     * on the provided new value. All other places should only attempt to modify\n     * the mutable by assigning to value prop directly.\n     */\n    set _value(newValue: T) {\n      value = newValue;\n      if (syncDataHolder) {\n        _updateDataSynchronously(\n          syncDataHolder,\n          makeShareableCloneOnUIRecursive(newValue)\n        );\n      }\n      listeners.forEach((listener) => {\n        listener(newValue);\n      });\n    },\n    get _value(): T {\n      return value;\n    },\n    addListener: (id: number, listener: (newValue: T) => void) => {\n      listeners.set(id, listener);\n    },\n    removeListener: (id: number) => {\n      listeners.delete(id);\n    },\n    _animation: null,\n    _isReanimatedSharedValue: true,\n  };\n  return self;\n}\n\nexport function makeMutable<T>(\n  initial: T,\n  oneWayReadsOnly = false\n): SharedValue<T> {\n  let value: T = initial;\n  let syncDataHolder: ShareableSyncDataHolderRef<T> | undefined;\n  if (!oneWayReadsOnly && NativeReanimatedModule.native) {\n    // updates are always synchronous when running on web or in Jest environment\n    syncDataHolder = NativeReanimatedModule.makeSynchronizedDataHolder(\n      makeShareableCloneRecursive(value)\n    );\n    registerShareableMapping(syncDataHolder);\n  }\n  const handle = makeShareableCloneRecursive({\n    __init: () => {\n      'worklet';\n      return makeUIMutable(initial, syncDataHolder);\n    },\n  });\n  // listeners can only work on JS thread on Web and jest environments\n  const listeners = NativeReanimatedModule.native ? undefined : new Map();\n  const mutable = {\n    set value(newValue) {\n      if (NativeReanimatedModule.native) {\n        runOnUI(() => {\n          mutable.value = newValue;\n        })();\n      } else {\n        valueSetter(mutable, newValue);\n      }\n    },\n    get value() {\n      if (syncDataHolder) {\n        return NativeReanimatedModule.getDataSynchronously(syncDataHolder);\n      }\n      return value;\n    },\n    set _value(newValue: T) {\n      if (NativeReanimatedModule.native) {\n        throw new Error(\n          'Setting `_value` directly is only possible on the UI runtime'\n        );\n      }\n      value = newValue;\n      listeners!.forEach((listener) => {\n        listener(newValue);\n      });\n    },\n    get _value(): T {\n      if (NativeReanimatedModule.native) {\n        throw new Error(\n          'Reading from `_value` directly is only possible on the UI runtime'\n        );\n      }\n      return value;\n    },\n    modify: (modifier: (value: T) => T) => {\n      runOnUI(() => {\n        mutable.value = modifier(mutable.value);\n      })();\n    },\n    addListener: (id: number, listener: (value: T) => void) => {\n      if (NativeReanimatedModule.native) {\n        throw new Error('adding listeners is only possible on the UI runtime');\n      }\n      listeners!.set(id, listener);\n    },\n    removeListener: (id: number) => {\n      if (NativeReanimatedModule.native) {\n        throw new Error(\n          'removing listeners is only possible on the UI runtime'\n        );\n      }\n      listeners!.delete(id);\n    },\n    _isReanimatedSharedValue: true,\n  };\n  registerShareableMapping(mutable, handle);\n  return mutable;\n}\n\nexport function makeRemote<T extends object>(initial: T = {} as T): T {\n  const handle = makeShareableCloneRecursive({\n    __init: () => {\n      'worklet';\n      return initial;\n    },\n  });\n  registerShareableMapping(initial, handle);\n  return initial;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}